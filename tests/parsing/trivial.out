==== Raw AST ====
[var [keker, loler]: ([Loler<[Int, String<[Bool]>]>, Int] -> Char) = ["hello", ((((((((10 + (31 * 4)) - 1) - 4) - (-4)) + 53) - 62) + 174) + "test")], var [a, b]: <!MISSING TYPE!><!> = [10, 11], var [c]: Int, let [pi, e]: <!MISSING TYPE!><!> = [3.14159, 2.71828], typealias Callback = (Int -> Int), typealias Chain<[T]> = (T -> (Test<[String]> -> Bool)), ([a, b] = [0]), ([dawd] = [1]), if (test + fest) [([a] = [d])] else [([b] = [(-d)])], if (gest * 2) [[([keker] = [10]), ([a, b] = [0, 1])]] else [([loler] = [12])], ([andOnNewLine] = ["Hello"])]

!!GlobalDeclarationResolver has no implementation for non-identifier type aliases names: `Callback`!!
!!GlobalDeclarationResolver has no implementation for non-identifier type aliases names: `Chain<[T]>`!!
!!DeepDeclarationResolver has no implementation for non-identifier type nodes names: `Loler`!!
!!DeepDeclarationResolver has no implementation for non-identifier type aliases names: `Callback`!!
!!DeepDeclarationResolver has no implementation for non-identifier type nodes names: `Test`!!
!!DeepDeclarationResolver has no implementation for non-identifier type aliases names: `Chain<[T]>`!!
==== Resolved AST ====
[var [keker, loler]: [BINARY] = ["hello", ((((((((10 + (31 * 4)) - 1) - 4) - (-4)) + 53) - 62) + 174) + "test")], var [a, b]: Int = [10, 11], var [c]: Int, let [pi, e]: Real = [3.14159, 2.71828], typealias Callback = [BINARY], typealias Chain<[T]> = [BINARY], ([a, b] = [0]), ([dawd] = [1]), if (test + fest) [([a] = [d])] else [([b] = [(-d)])], if (gest * 2) [[([keker] = [10]), ([a, b] = [0, 1])]] else [([loler] = [12])], ([andOnNewLine] = ["Hello"])]

==== Global declarations ====
-- Char := Char
-- Int := Int
-- Real := Real
-- String := String
-- a := var [a, b]: Int = [10, 11]
-- b := var [a, b]: Int = [10, 11]
-- c := var [c]: Int
-- e := let [pi, e]: Real = [3.14159, 2.71828]
-- keker := var [keker, loler]: [BINARY] = ["hello", ((((((((10 + (31 * 4)) - 1) - 4) - (-4)) + 53) - 62) + 174) + "test")]
-- loler := var [keker, loler]: [BINARY] = ["hello", ((((((((10 + (31 * 4)) - 1) - 4) - (-4)) + 53) - 62) + 174) + "test")]
-- pi := let [pi, e]: Real = [3.14159, 2.71828]

==== Diagnostics ====
[MISSING_VISUALIZATION]
Error > Unresolved reference `T`.
[MISSING_VISUALIZATION]
Error > Unresolved reference `Bool`.
[MISSING_VISUALIZATION]
Error > Unresolved reference `dawd`.
[MISSING_VISUALIZATION]
Error > Unresolved reference `test`.
[MISSING_VISUALIZATION]
Error > Unresolved reference `fest`.
[MISSING_VISUALIZATION]
Error > Unresolved reference `gest`.
[MISSING_VISUALIZATION]
Error > Unresolved reference `andOnNewLine`.

==== Done ====
